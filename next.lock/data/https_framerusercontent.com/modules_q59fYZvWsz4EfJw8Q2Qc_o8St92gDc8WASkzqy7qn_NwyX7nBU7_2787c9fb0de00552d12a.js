import * as React from "react"; import { motion , addPropertyControls , cx , useVariantState , useAddVariantProps , useActiveVariantCallback , withCSS , LayoutGroup , ControlType , Text as Text1 , Stack } from "framer"; const variantClassNames = {AkJ3ibqqy: "framer-v-en0edc"}; const humanReadableVariantMap = {}; const transitions = {default: {type: "spring", ease: [0.44, 0, 0.56, 1], duration: 0.3, delay: 0, stiffness: 500, damping: 60, mass: 1}}; const Component = React.forwardRef(function ({ style, className, layoutId, width, height, variant: outerVariant = "AkJ3ibqqy", label: gJ6NzpEDw = "Label", required: KC4myAldI = false, ...restProps }, ref) { const outerVariantId = humanReadableVariantMap[outerVariant]; const variant = outerVariantId || outerVariant; const { variants, baseVariant, gestureVariant, classNames, transition, setVariant, setGestureState } = useVariantState({defaultVariant: "AkJ3ibqqy", variant, transitions, variantClassNames}); const { activeVariantCallback, delay } = useActiveVariantCallback(baseVariant); const addVariantProps = useAddVariantProps(baseVariant, gestureVariant, {}); return React.createElement(LayoutGroup, {id: layoutId}, React.createElement(motion.div, {initial: variant, animate: variants, className: cx("framer-rnqql", classNames), style: {display: "contents"}, onHoverStart: () => { return setGestureState({isHovered: true}); }, onHoverEnd: () => { return setGestureState({isHovered: false}); }, onTapStart: () => { return setGestureState({isPressed: true}); }, onTap: () => { return setGestureState({isPressed: false}); }, onTapCancel: () => { return setGestureState({isPressed: false}); }}, React.createElement(Stack, Object.assign({}, restProps, {layoutId: "AkJ3ibqqy", style: {rotate: 0, ...style}, className: cx("framer-en0edc", className), background: null, direction: "horizontal", distribution: "start", alignment: "start", gap: 2, __fromCanvasComponent: true, __contentWrapperStyle: {width: "100%", height: "100%", padding: "0px 0px 0px 0px"}, center: false, "data-highlight": false, transition, ref}, addVariantProps("AkJ3ibqqy")), React.createElement(Text1, Object.assign({layoutId: "AX1RvNsCK", style: {rotate: 0}, withExternalLayout: true, verticalAlignment: "top", __fromCanvasComponent: true, fonts: ["Inter-SemiBold"], className: "framer-19vg3qv", rawHTML: "<div style='font-size: 0; line-height: 0; tab-size: 4; white-space: inherit; word-wrap: inherit'><div style='direction: ltr; font-size: 0'><span style='-webkit-text-fill-color: rgb(130, 130, 130); font-family: &quot;Inter-SemiBold&quot;, &quot;Inter&quot;, sans-serif; font-size: 14px; font-weight: 600; letter-spacing: 0px; line-height: 1.2'>Label</span><br></div></div>", text: gJ6NzpEDw, transition}, addVariantProps("AX1RvNsCK"))), KC4myAldI && React.createElement(Text1, Object.assign({layoutId: "uKCvBQGSt", style: {rotate: 0}, withExternalLayout: true, verticalAlignment: "top", __fromCanvasComponent: true, fonts: ["Inter-Bold"], className: "framer-62f2sr", rawHTML: "<div style='font-size: 0; line-height: 0; tab-size: 4; white-space: inherit; word-wrap: inherit'><div style='direction: ltr; font-size: 0'><span style='-webkit-text-fill-color: rgb(255, 72, 0); font-family: &quot;Inter-Bold&quot;, &quot;Inter&quot;, sans-serif; font-size: 12px; font-weight: 700; letter-spacing: 0px; line-height: 1.2'>*</span><br></div></div>", transition}, addVariantProps("uKCvBQGSt")))))); }); const css = `.framer-rnqql [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none;}\n.framer-rnqql .framer-en0edc {position: relative; overflow: visible; width: 268px; height: 15px;}\n.framer-rnqql .framer-19vg3qv {position: relative; overflow: visible; width: auto; height: auto; flex-shrink: 0; white-space: pre;}\n.framer-rnqql .framer-62f2sr {position: relative; overflow: visible; width: auto; height: auto; flex-shrink: 0; white-space: pre;}`; const FramerNwyX7nBU7 = withCSS(Component, css); export default FramerNwyX7nBU7; FramerNwyX7nBU7.displayName = "Label"; FramerNwyX7nBU7.defaultProps = {width: 268, height: 15}; addPropertyControls(FramerNwyX7nBU7, {gJ6NzpEDw: {type: ControlType.String, title: "Label", defaultValue: "Label"}, KC4myAldI: {type: ControlType.Boolean, title: "Required", defaultValue: false}}); export const __FramerMetadata__ = {exports: {default: {type: "reactComponent", slots: [], annotations: {framerSupportedLayoutWidth: "any", framerSupportedLayoutHeight: "any", framerVariables: "{\"gJ6NzpEDw\":\"label\",\"KC4myAldI\":\"required\"}", framerIntrinsicWidth: "268", framerIntrinsicHeight: "15"}}}}; 